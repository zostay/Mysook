#!/usr/bin/env perl6
use v6;

use Base64;
use Crypt::RSA;
use JSON::Fast;
use Smack::Client;
use Smack::Client::Request::Common;

my %*SUB-MAIN-OPTS = :named-anywhere;

constant $ADMIN-TOKEN = ~$*PROGRAM-NAME.IO.parent.parent.add("admin.token");
constant $API-URL     = "https://nametag.zostay.com";
constant $ZOSTAYIFY   = ~$*PROGRAM-NAME.IO.parent.add("zostayify");
constant $ID          = "zostay";

my $ua          = Smack::Client.new;
my $api-url     = $API-URL;
my $admin-token = $ADMIN-TOKEN;

sub set-globals($url) {
    $api-url  = $url;
}

sub authorization($id) { "Bearer $admin-token.IO.slurp.chomp()" }

sub api-url($path) { $api-url ~ $path }

sub get-program($program) {
    use NameTag;
    use NameTag::ProgramBuilder;
    EVALFILE $program;
}

sub do-GET($path) {
    GET(api-url($path), Authorization => authorization($ID));
}

sub do-POST($path, %postdata) {
    my $content = to-json(%postdata);
    POST(api-url($path), :$content,
        Content-Type  => 'application/json; charset=utf-8',
        Authorization => authorization($ID),
    );
}

multi list-programs() {
    my $req = do-GET("/program");
    my $res = await $ua.request($req);

    unless $res.code == 200 {
        note "Bad stuff: $res.gist()";
        note $res.content;
        exit 1;
    }

    my $programs = from-json($res.content);
    $programs<programs>;
}

multi list-programs(:$queue!) {
    my $req = do-GET("/queue/$queue");
    my $res = await $ua.request($req);

    unless $res.code == 200 {
        note "Bad stuff: $res.gist()";
        note $res.content;
        exit 1;
    }

    my $programs = from-json($res.content);
    $programs<programs>;
}

sub upload-program($name, $author, $program-bin) {
    my $program = encode-base64($program-bin.buf8, :str);

    my $req = do-POST("/program", %(
        :$name, :$author, :$program,
    ));
    my $res = await $ua.request($req);

    unless $res.code == 200 || $res.code == 201 {
        note "Bad stuff: $res.gist()";
        note $res.content;
        exit 1;
    }

    my $created = from-json($res.content);
    say "ID: $created<id>";
}

sub enqueue-program($queue-name, $id) {
    my $req = do-POST("/queue/$queue-name", %( :$id ));
    my $res = await $ua.request($req);

    unless $res.code == 200 || $res.code == 201 {
        note "Bad stuff: $res.gist()";
        note $res.content;
        exit 1;
    }
}

sub dump-cpp($program) {
    my @str = $program.program-ops.join(", ");
    while @str[*-1].chars > 74 {
        my $split = pop @str;

        my $i = $split.rindex(' ', 74);
        my $x = $split.substr(0..^$i);
        my $y = $split.substr($i^..*);
        @str.append: $x, $y;
    }

    say q:to/END_PREAMBLE/;
    #include <inttypes.h>
    #include "ops.h"
    END_PREAMBLE

    for $program.codex.call-index.kv -> $name, $index {
        say "#define $name.uc.subst(/\W/, "_", :g) $index";
    }

    say '';
    say 'uint32_t program[] = {';
    say @str.join("\n").indent(4);
    say '};';
}

sub dump-bin($program) {
    for @($program.buf8) { .chr.print }
}

multi MAIN('dump', Str $program-file, Bool :$cpp, Bool :$bin) {
    my $program = get-program($program-file);

    if ($cpp && !$bin) {
        dump-cpp($program);
    }
    elsif ($bin && !$cpp) {
        dump-bin($program);
    }
    else {
        note "Please specify either --cpp or --bin";
    }
}

multi MAIN('list', Str :$queue, Str :$url = $API-URL) {
    set-globals($url);

    my @programs := $queue ?? list-programs(:$queue) !! list-programs();
    for @programs -> $program {
        say "$program<id>: $program<name> ($program<author>)";
    }
    say "No programs." unless @programs;
}

subset ProgramName of Str where /\w ** 3/;
subset AuthorName of Str where /^ (github|https?|cpan) ':' '//'? \w ** 3/;

multi MAIN('upload', Str $program-file, ProgramName :$name!, AuthorName :$author!, Str :$url = $API-URL) {
    set-globals($url);

    my $program = get-program($program-file);

    upload-program($name, $author, $program);
}

multi MAIN('enqueue', Str $queue-name, Int $program-id, Str :$url = $API-URL) {
    set-globals($url);

    enqueue-program($queue-name, $program-id);
}

multi MAIN('generate-keys') {
    use Crypt::RSA;
    my $crypt = Crypt::RSA.new;
    my ($public, $private) = $crypt.generate-keys;
    say "PUBLIC:  $public.exponent():$public.modulus()";
    say "PRIVATE: $private.exponent():$private.modulus()";
}
